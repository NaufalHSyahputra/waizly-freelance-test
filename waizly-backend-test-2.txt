1. Tampilkan seluruh data dari tabel "employees" (5 Points)
SELECT * FROM employees;

2. Berapa banyak karyawan yang memiliki posisi pekerjaan (job title) "Manager"? (5 Points)
SELECT COUNT(job_title) FROM employees WHERE job_title = 'Manager';

3. Tampilkan daftar nama dan gaji (salary) dari karyawan yang bekerja di departemen "Sales" atau 
"Marketing" (10 Points)
SELECT "name", salary FROM employees WHERE department = 'Sales' OR department = 'Marketing';

4. Hitung rata-rata gaji (salary) dari karyawan yang bergabung (joined) dalam 5 tahun terakhir (berdasarkan 
kolom "joined_date") (10 Points)
SELECT AVG(salary) as average_salary FROM employees WHERE EXTRACT(YEAR FROM AGE(NOW(), join_date)) < 5;

5. Tampilkan 5 karyawan dengan total penjualan (sales) tertinggi dari tabel "employees" dan "sales_data" 
(10 Points)
SELECT e.name, SUM(s.sales) as total_sales
FROM employees e
JOIN sales_data s ON e.employee_id = s.employee_id
GROUP BY e.employee_id
ORDER BY total_sales DESC
LIMIT 5;

6. Tampilkan nama, gaji (salary), dan rata-rata gaji (salary) dari semua karyawan yang bekerja di departemen 
yang memiliki rata-rata gaji lebih tinggi dari gaji rata-rata di semua departemen (15 Points)
SELECT e.name, e.salary, all_avg_salary.all_avg_salary
FROM employees e
JOIN (
    SELECT department, AVG(salary) as avg_salary
    FROM employees
    GROUP BY department
) d ON e.department = d.department
JOIN (
    SELECT AVG(salary) as all_avg_salary
    FROM employees
) all_avg_salary ON 1=1
WHERE d.avg_salary > all_avg_salary.all_avg_salary;

7. Tampilkan nama dan total penjualan (sales) dari setiap karyawan, bersama dengan peringkat (ranking) 
masing-masing karyawan berdasarkan total penjualan. Peringkat 1 adalah karyawan dengan total 
penjualan tertinggi (25 Points)
SELECT e.name,SUM(s.sales) total_sales, DENSE_RANK() OVER (ORDER BY SUM(s.sales) DESC) AS ranking FROM employees e JOIN sales_data s ON s.employee_id=e.employee_id GROUP BY e.name

8. Buat sebuah stored procedure yang menerima nama departemen sebagai input, dan mengembalikan 
daftar karyawan dalam departemen tersebut bersama dengan total gaji (salary) yang mereka terima (20 
Points)

CREATE OR REPLACE FUNCTION get_employees_by_department(p_department varchar)
RETURNS TABLE(
    employee_id BIGINT,
    "name" VARCHAR,
    salary INTEGER,
    total_salary INTEGER
) AS '
DECLARE
    total_salary INTEGER;
BEGIN
    SELECT sum(e.salary) INTO total_salary FROM employees e WHERE e.department = p_department;
    
    RETURN QUERY 
    SELECT e1.employee_id, e1."name", e1.salary, total_salary FROM employees e1 WHERE e1.department = p_department;
END;'
LANGUAGE plpgsql;
